[1] kafka 일반 메시징큐
  
  . zookeeper
    - ./bin/zookeeper-server-start.sh ./config/zookeeper.properties
  . kafka
    - ./bin/kafka-server-start.sh ./config/server.properties
  . Topic 생성
    - ./bin/kafka-topics.sh --create --topic quickstart-events --bootstrap-server localhost:9092 --partitions1
  . Topic 목록확인
    - ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --list  
  . Topic 정보확인
    - ./bin/kafka-topics.sh --describe --topic quickstart-events --bootstrap-server localhost:9092  
  
  . Producer(메시지 생산)
    - junhyoungcho@JUNHYOUNGui-iMac kafka_2.13-3.4.0 % ./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic quickstart-events
      ./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic my_topic_users

  . Consumer(구독)    
    - junhyoungcho@JUNHYOUNGui-iMac kafka_2.13-3.4.0 % ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic quickstart-events --from-beginning
    ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic my_topic_users --from-beginning

[2] Kafka Connect  
  . Kafka Connect 설치
    - curl -O http://packages.confluent.io/archive/5.5/confluent-community-5.5.2-2.12.tar.gz
    - curl -O http://packages.confluent.io/archive/6.1/confluent-community-6.1.0.tar.gz
    - tar xvf confluent-community-6.1.0.tar.gz
    - cd  $KAFKA_CONNECT_HOME
  
  . Kafka Connect 실행(confluent..)
    - ./bin/connect-distributed ./etc/kafka/connect-distributed.properties

  . JDBC Connector 설치
    - https://docs.confluent.io/5.5.1/connect/kafka-connect-jdbc/index.html
    - confluentinc-kafka-connect-jdbc-10.0.1.zip 
    - etc/kafka/connect-distributed.properties 파일 마지막에 아래 plugin 정보 추가
    - plugin.path=[confluentinc-kafka-connect-jdbc-10.0.1 폴더]
    - JdbcSourceConnector에서 MariaDB 사용하기 위해 mariadb 드라이버 복사
    - ./share/java/kafka/ 폴더에 mariadb-java-client-2.7.2.jar  파일 복사


[3] Kafka 데이터 동기화 관련 mariadb 테이블 생성정보
create table users(
    id int auto_increment primary key,
    user_id varchar(20),
    pwd varchar(20),
    name varchar(20),
    created_at datetime default NOW()
);


insert into users(user_id, pwd, name) values('user1','test1111','dotori');


insert into users(user_id, pwd, name) values('user2','test2222','kokoyeosa');

insert into users(user_id, pwd, name) values('user3','test3333','sharalra');


select * from users;


create table orders (

  id int auto_increment primary key,

  user_id varchar(50) not null,

  product_id varchar(20) not null,

  order_id varchar(50) not null,

  qty int default 0,

  unit_price int default 0,

  total_price int default 0,

  created_at datetime default now()

)    

[4] zipkin
  1. 다운로드 
    - curl -sSL https://zipkin.io/quickstart.sh | bash -s
  2. 실행
    - java -jar zipkin.jar

[5] docker
  1. mariadb 도커 컨테이너 실행 및 기능
    - docker exec -it mariadb /bin/bash    
      root@069939e899e6:/# mysql -uroot -p -h127.0.0.1
      MariaDB [(none)]> show databases;
      MariaDB [(none)]> create database mydb;

  2. user-service의 Dockerfile 내용
    - Dockerfile 내용
      FROM openjdk:17-ea-11-jdk-slim
      VOLUME /tmp
      COPY target/user-service-1.0.jar UserService.jar
      ENTRYPOINT ["java", "-jar", "UserService.jar"]      
    - 이미지 생성 및 docker hub에 push
      . docker build --tag=jhcho7510/user-service:1.0 .  
        (. docker build -t jhcho7510/user-service:1.0 .  )
      . docker push jhcho7510/user-service:1.0

    - 컨테이너 기동
      docker run -d --network ecommerce-network \
      --name user-service \
      -e "spring.cloud.config.uri=http://config-service:8888" \
      -e "spring.rabbitmq.host=rabbitmq" \
      -e "spring.zipkin.base-url=http://zipkin:9411" \
      -e "eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/" \
      -e "logging.file=/api-logs/users-ws.log" \
      jhcho7510/user-service:1.0

    - 로그확인
      . docker logs 컨테이너명[user-service]  
      . docker logs -f 컨테이너명[user-service] -> 실시간으로 로그를 확인 




  
  3. maven Testcode 생략하고 빌드하기
    - mvn clean compile package -DskipTests=true
      : -DskipTests=true 을 기술하면, 테스트 코드를 생략해서 빌드가 빠르다. 사용하자.

  4. docker 이미지처리
    - docker build -t jhcho7510/user-service:1.0 . --> 이미지를 빌드 처리
    - docker push jhcho7510/user-service:1.0  --> 생성한 이미지를 Docker hub사이트에 업로드
    - docker push jhcho7510/user-service:1.0  --> Docker hub사이트의 이미지를 다운로드    

  5. docker 컨테이너 삭제와 불필요한 리소스 삭제
    - docker system prune  
  
  6. docker network
    - docker network ls 확인    
    - docker network create --gateway 172.18.0.1 --subnet 172.18.0.0/16 ecommerce-network 생성
    - docker network inspect ecommerce-network 네트워크의 상세정보 확인

  7. docker rabbitmq 컨테이너 등록
    - 컨테이너 기동
      docker run -d --name rabbitmq --network ecommerce-network \
      -p 15672:15672 -p 5672:5672 -p 15671:15671 -p 5671:5671 -p 4369:4369 \
      -e RABBITMQ_DEFAULT_USER=guest \
      -e RABBITMQ_DEFAULT_PASS=guest rabbitmq:management    

  8. docker config-service 컨테이너/이미지 생성
    - docker image 생성 
      docker build -t jhcho7510/config-service:1.0 .   

    - docker image 및 컨테이너 생성
      docker run -d -p 8888:8888 --network ecommerce-network \
      -e "spring.rabbitmq.host=rabbitmq" \
      -e "spring.profiles.active=default" \
      --name config-service jhcho7510/config-service:1.0

    - docker 로그 확인
      docker logs [container명 또는 container ID]      
    - docker 컨테이너 중지
      docker stop [container명 또는 container ID]      

  9. docker discoveryservice 컨테이너/이미지 생성 및 기동
    - Dockerfile
      FROM openjdk:17-ea-11-jdk-slim
      VOLUME /tmp
      COPY target/discoveryservice-1.0.jar DiscoveryService.jar
      ENTRYPOINT ["java","-jar","DiscoveryService.jar"]
    - discoveryservice 이미지 생성
      docker build --tag=jhcho7510/discovery-service:1.0 . 
    - docker hub에 이미지 푸시  
      docker push jhcho7510/discovery-service:1.0    
      docker push jhcho7510/config-service:1.0 (config-service 푸시)
    - docker 컨테이너 생성 및 기동
      docker run -d -p 8761:8761 --network ecommerce-network \
      -e "spring.cloud.config.uri=http://config-service:8888" \
      --name discovery-service jhcho7510/discovery-service:1.0             
    - docker log 확인
      docker logs discover-service  

  10. docker apigateway 컨테이너/이미지 생성 및 기동
    - Dockerfile 
      FROM openjdk:17-ea-11-jdk-slim
      VOLUME /tmp
      COPY target/apigateway-service-1.0.jar ApiGatewayService.jar
      ENTRYPOINT ["java","-jar","ApiGatewayService.jar"]
    - apigateway 이미지 생성
      docker build --tag=jhcho7510/apigateway-service:1.0 . 
      (docker build -t jhcho7510/apigateway-service:1.0 . )
    - docker hub에 이미지 푸시  
      docker push jhcho7510/apigateway-service:1.0          
    - docker 컨테이너 생성 및 기동
      docker run -d -p 8000:8000 --network ecommerce-network \
      -e "spring.cloud.config.uri=http://config-service:8888" \
      -e "spring.rabbitmq.host=rabbitmq" \
      -e "eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/" \
      --name apigateway-service \
      jhcho7510/apigateway-service:1.0

  11. docker mariadb 컨테이너/이미지 생성 및 기동
    - Dockerfile
      FROM mariadb
      ENV MYSQL_ROOT_PASSWORD test1357
      ENV MYSQL_DATABASE MYSQL_DATABASE
      COPY ./mysql_data/mysql /var/lib/mysql
      EXPOSE 3306
      ENTRYPOINT ["mysqld", "--user=root"]    
    - mariadb 이미지 생성('my_mariadb'명으로 이미지 생성)
      docker build -t jhcho7510/my-mariadb:1.0 .  
    - docker 컨테이너 생성 및 기동
      docker run -d -p 3306:3306  --network ecommerce-network --name mariadb jhcho7510/my-mariadb:1.0
    - docker 컨테이너에 접속
      docker exec -it mariadb /bin/bash  
    - 컨테이너 mariadb 사용
      . mysql -hlocalhost -uroot -p 
      . test1357
      . show databases
      . use mydb[데이터베이스명]
      . show tables;
      . grant all privileges on *.* to 'root'@'%' identified by 'test1357';
      . flush privileges
      . exit

  12. docker kafak + zookeeper
    - kafka, zookeeper 참조 git uri 및 실행
      . https://github.com/wurstmeister/kafka-docker
      . git clone https://github.com/wurstmeister/kafka-docker.git       
    
    - docker-compose 파일 기동
      docker-compose -f docker-compose-single-broker.yml up -d  / 정지할때는 up 대신 down   

  13. docker zipkin 
    - docker run -d -p 9411:9411 \
      --network ecommerce-network \
      --name zipkin \
      openzipkin/zipkin
  
  . docker logs 컨테이너명(zipkin)    

  14. docker prometheus / grafana
    - prometheus
      docker run -d -p 9090:9090 \
      --network ecommerce-network \
      --name prometheus \
      -v /Users/junhyoungcho/prometheus-2.42.0.darwin-amd64/prometheus.yml:/etc/prometheus/prometheus.yml \
      prom/prometheus 

    - Grafana
      docker run -d -p 3000:3000 \
      --network ecommerce-network \
      --name grafana \
      grafana/grafana 
  
  15. docker order-service      
    - Dockerfile 내용
      FROM openjdk:17-ea-11-jdk-slim
      VOLUME /tmp
      COPY target/user-service-1.0.jar OrderService.jar
      ENTRYPOINT ["java", "-jar", "OrderService.jar"]
    
    - 이미지 생성
      docker build -t jhcho7510/order-service:1.0 .
    - docker hub에 푸시
      docker push jhcho7510/order-service

    - docker 컨테이너 기동
      docker run -d --network ecommerce-network \
      --name order-service \
      -e "spring.cloud.config.uri=http://config-service:8888" \
      -e "spring.rabbitmq.host=rabbitmq" \
      -e "spring.zipkin.base-url=http://zipkin:9411" \
      -e "eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/" \
      -e "spring.datasource.url=jdbc:mariadb://mariadb:3306/mydb" \
      -e "logging.file=/api-logs/orders-ws.log" \
      jhcho7510/order-service:1.0

  16. docker catalog-service
    - Dockerfile 내용
      FROM openjdk:17-ea-11-jdk-slim
      VOLUME /tmp
      COPY target/catalog-service-1.0.jar CatalogService.jar
      ENTRYPOINT ["java", "-jar", "CatalogService.jar"]
    
    - 이미지 생성
      docker build -t jhcho7510/catalog-service:1.0 .
    - docker hub에 이미지 푸시  
      docker push jhcho7510/catalog-service:1.0
    
    - docker 컨테이너 기동(없는 환경정보를 설정하고 컨테이너를 기동하려고하면 오류남.)
      docker run -d --network ecommerce-network \
      --name catalog-service \
      -e "eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/" \
      -e "logging.file=/api-logs/catalogs-ws.log" \
      jhcho7510/catalog-service:1.0   


         





